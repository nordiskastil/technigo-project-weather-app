// Variables for API Key and City
const apiKey = '34f45477a1d71bd80d5960463779ee74';
const city = 'Ostersund,Sweden';

// This function takes a Unix timestamp (which is in seconds), converts it to a JavaScript Date object, and formats it into HH:mm using toLocaleTimeString
function formatTime(unixTimestamp) {
  const date = new Date(unixTimestamp * 1000);
  return date.toLocaleTimeString('sv-SE', { hour: '2-digit', minute: '2-digit', hour12: false });
}

// Use fetch() to get the data.
// await means it waits until the data is returned.
//Then we convert it from JSON.
async function fetchWeather() {
  // Current weather
  const currentUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=${apiKey}`;
  const currentResponse = await fetch(currentUrl);
  const currentData = await currentResponse.json();

  // Get from the JSON object into the HTML using document.getElementById(...).
  // Math.round(...) is used to round the temperature.
  document.getElementById('city').textContent = currentData.name;
  document.getElementById('temperature').textContent = parseFloat(currentData.main.temp.toFixed(1));
  document.getElementById('description').textContent = currentData.weather[0].description;
  document.getElementById('sunrise').textContent = formatTime(currentData.sys.sunrise);
  document.getElementById('sunset').textContent = formatTime(currentData.sys.sunset);

  // Forecast: Call the 5-day forecast API and turn the result into JSON.
  const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=${apiKey}`;
  const forecastResponse = await fetch(forecastUrl);
  const forecastData = await forecastResponse.json();

  const forecastContainer = document.getElementById('forecast');
  forecastContainer.innerHTML = '';

  // Filter the forecast data to get only the entries at noon (12:00:00) and limit to 4 days
  const forecastAtNoon = forecastData.list.filter(item => item.dt_txt.includes('12:00:00')).slice(0, 4);

  // Assign a background color class (sunny, cloudy, rainy) based on the weather.
  // Add an icon (SVG).
  forecastAtNoon.forEach(day => {
    const temp = day.main.temp.toFixed(1);
    const description = day.weather[0].main.toLowerCase();
    let className = '';
    let icon = '';

    if (description.includes('cloud')) {
      className = 'cloudy';
      icon = `<svg xmlns="http://www.w3.org/2000/svg" width="78" height="54" viewBox="0 0 78 54" fill="none">
<path d="M34.2621 52.2606C28.8663 52.2606 23.9056 49.2145 21.4687 44.5149C19.5541 45.4722 17.4653 45.9074 15.3766 45.9074C7.89207 45.9074 1.79999 39.8153 1.79999 32.3307C1.79999 25.0202 7.63098 19.0152 14.9415 18.7541C14.8545 18.0578 14.7674 17.2746 14.7674 16.5783C14.7674 7.96238 21.7298 1 30.3458 1C37.4822 1 43.7484 5.9607 45.4019 12.8361C47.2295 11.8787 49.3183 11.4436 51.494 11.4436C58.4564 11.4436 64.2003 16.5783 64.9836 23.5407C71.4238 23.5407 76.8197 28.9366 76.9937 35.4638C76.9937 42.0781 71.6849 47.3869 65.0706 47.3869C62.9819 47.3869 60.9803 46.8647 59.1526 45.8203C57.412 48.3442 54.6271 49.8237 51.581 49.8237C49.2312 49.8237 46.9684 48.9534 45.2279 47.2999C42.5299 50.4329 38.5266 52.2606 34.2621 52.2606ZM21.7298 43.4705C21.8168 43.4705 21.8168 43.4705 21.9039 43.4705C21.9909 43.4705 22.0779 43.5576 22.165 43.7316C24.3407 48.4312 29.1273 51.3903 34.3491 51.3903C38.5266 51.3903 42.4429 49.5626 44.9668 46.2555C45.0538 46.1685 45.1408 46.0814 45.3149 46.0814C45.4889 46.0814 45.576 46.0814 45.663 46.2555C47.2295 47.9091 49.4053 48.8664 51.7551 48.8664C54.6271 48.8664 57.238 47.3869 58.8045 44.9501C58.8915 44.776 59.2397 44.689 59.4137 44.776C61.1543 45.9074 63.156 46.4296 65.2447 46.4296C71.3368 46.4296 76.2975 41.4689 76.2975 35.3768C76.1234 29.2847 71.0757 24.324 65.0706 24.324H64.6355C64.3744 24.324 64.2003 24.1499 64.2003 23.8888C63.5911 17.2746 58.1953 12.2268 51.581 12.2268C49.4053 12.2268 47.3166 12.749 45.4019 13.7934C45.3149 13.8804 45.1408 13.8804 44.9668 13.7934C44.8797 13.7064 44.7057 13.6193 44.7057 13.4453C43.3132 6.65694 37.3081 1.69624 30.3458 1.69624C22.252 1.69624 15.6377 8.31051 15.6377 16.4043C15.6377 17.2746 15.7248 18.1449 15.8988 18.9281C15.8988 19.0152 15.8988 19.1892 15.8118 19.2763C15.7248 19.3633 15.6377 19.4503 15.4637 19.4503C8.41426 19.4503 2.67029 25.1943 2.67029 32.1567C2.67029 39.2061 8.41426 44.863 15.3766 44.863C17.4654 44.863 19.5541 44.3408 21.4687 43.3835C21.5558 43.4705 21.6428 43.4705 21.7298 43.4705Z" fill="#F47775" stroke="#F47775" stroke-width="2"/>
</svg>`;
    } else if (description.includes('rain')) {
      className = 'rainy';
      icon = `<svg xmlns="http://www.w3.org/2000/svg" width="74" height="73" viewBox="0 0 74 73" fill="none">
      <path d="M41.7348 70.2109C38.2722 70.2069 35.4661 67.4009 35.4621 63.9382V35.5935C35.4621 34.9039 36.0211 34.3448 36.7108 34.3448C37.4004 34.3448 37.9594 34.9039 37.9594 35.5935V63.9382C37.8982 65.3254 38.6034 66.6343 39.7956 67.3462C40.9878 68.0581 42.4745 68.0581 43.6667 67.3462C44.8589 66.6343 45.5641 65.3254 45.5028 63.9382C45.5028 63.2486 46.0619 62.6896 46.7515 62.6896C47.4411 62.6896 48.0002 63.2486 48.0002 63.9382C47.9961 67.398 45.1946 70.2028 41.7348 70.2109Z" fill="#164A68"/>
      <path d="M73.4509 40.669H71.2474L70.9169 39.9345C69.9071 37.6546 67.6481 36.1844 65.1547 36.1844C62.6612 36.1844 60.4022 37.6546 59.3924 39.9345L59.0619 40.669H57.0934L56.7629 39.9345C55.7531 37.6546 53.4941 36.1844 51.0007 36.1844C48.5072 36.1844 46.2482 37.6546 45.2384 39.9345L44.9079 40.669H42.9394L42.6162 39.9345C41.6084 37.6501 39.3471 36.1761 36.8503 36.1761C34.3536 36.1761 32.0922 37.6501 31.0844 39.9345L30.7612 40.669H28.7928L28.4622 39.9345C27.4525 37.6546 25.1935 36.1844 22.7 36.1844C20.2065 36.1844 17.9475 37.6546 16.9378 39.9345L16.6073 40.669H14.6461L14.3156 39.9345C13.3058 37.6546 11.0468 36.1844 8.55336 36.1844C6.05989 36.1844 3.80088 37.6546 2.79113 39.9345L2.46061 40.669H0V39.4203C0.0202496 20.525 15.3329 5.21241 34.2281 5.19217H39.2228C58.1181 5.21241 73.4307 20.525 73.4509 39.4203V40.669ZM22.7037 33.6764C25.4935 33.6799 28.117 35.0039 29.777 37.2462C31.44 35.0094 34.0631 33.691 36.8503 33.691C39.6376 33.691 42.2606 35.0094 43.9237 37.2462C45.5867 35.0094 48.2097 33.691 50.997 33.691C53.7843 33.691 56.4073 35.0094 58.0703 37.2462C59.5072 35.3105 61.6743 34.0479 64.0668 33.7523C66.4593 33.4567 68.8684 34.1539 70.7333 35.6817C68.8235 19.722 55.2963 7.70205 39.2228 7.68216L34.2281 7.68215C18.0648 7.70442 4.49251 19.8544 2.6883 35.9167C4.53599 34.2705 6.99058 33.4769 9.45226 33.7298C11.9139 33.9827 14.1559 35.2587 15.6304 37.2462C17.2903 35.0039 19.9138 33.6799 22.7037 33.6764Z" fill="#164A68"/>
      <path d="M37.0119 2.4451C38.2533 2.4451 39.2595 3.45138 39.2595 4.6927V5.8165H34.7643V4.6927C34.7643 3.45138 35.7706 2.4451 37.0119 2.4451Z" fill="#164A68"/>
      <path d="M15.6083 40.0006C14.9187 40.0006 14.3597 39.4415 14.3597 38.7519C14.2087 28.6107 18.3014 18.8675 25.6491 11.8762C28.9349 8.6774 32.7687 6.09498 36.9679 4.25201C37.6108 4.0005 38.3359 4.31784 38.5874 4.96081C38.839 5.60377 38.5216 6.32889 37.8786 6.5804C33.9602 8.32792 30.3819 10.7549 27.3091 13.7492C20.3753 20.4406 16.8937 28.8507 16.8937 38.7519C16.8939 39.0895 16.7573 39.4128 16.5151 39.6481C16.2729 39.8833 15.9458 40.0105 15.6083 40.0006Z" fill="#164A68"/>
      <path d="M57.9087 40.0006C57.2191 40.0006 56.66 39.4415 56.66 38.7519C56.66 15.6222 35.822 6.65384 35.609 6.5657C35.1693 6.41384 34.8505 6.0302 34.7817 5.57018C34.7129 5.11017 34.9055 4.65003 35.2815 4.37616C35.6574 4.1023 36.1544 4.06011 36.5712 4.26668C40.7639 6.19977 44.5888 8.84664 47.8753 12.0892C55.1565 19.0381 59.2421 28.6872 59.1647 38.7519C59.1607 39.4427 58.5995 40.0006 57.9087 40.0006Z" fill="#164A68"/>
      <path d="M29.6375 39.67C28.9728 39.671 28.424 39.1512 28.3888 38.4875C28.3447 37.54 27.2576 15.1227 36.0864 5.35376C36.5543 4.86793 37.3234 4.84147 37.8236 5.29399C38.3238 5.74652 38.3741 6.51445 37.9374 7.02844C29.799 16.0335 30.8494 38.1349 30.8861 38.3553C30.9041 38.6865 30.7895 39.0114 30.5677 39.258C30.3458 39.5047 30.0349 39.653 29.7036 39.67H29.6375Z" fill="#164A68"/>
      <path d="M43.7841 39.67H43.7107C43.0235 39.6306 42.4979 39.0425 42.5355 38.3553C42.5355 38.1349 43.6078 16.0262 35.4842 7.02843C35.1683 6.70043 35.056 6.22647 35.1912 5.79162C35.3264 5.35677 35.6876 5.02998 36.1337 4.93886C36.5799 4.84774 37.0403 5.00673 37.3351 5.35375C46.1492 15.1227 45.0769 37.5399 45.0255 38.4875C44.9904 39.1483 44.4459 39.6671 43.7841 39.67Z" fill="#164A68"/>
    </svg>`;
    } else if (description.includes('clear')) {
      className = 'sunny';
      icon = `<svg xmlns="http://www.w3.org/2000/svg" width="74" height="53" viewBox="0 0 74 53" fill="none">
  <path d="M17.4924 52.1421C14.3391 52.1421 11.5175 51.6156 9.76739 50.3615C4.34647 46.4777 3.51249 41.3581 3.19898 39.4345C3.15941 39.194 3.13506 39.0084 3.09854 38.8836C2.81851 37.8852 1.37882 37.036 0.897906 36.8169C0.356119 36.5673 0 36.0224 0 35.4259V29.3384C0 28.6779 0.429169 28.0904 1.05922 27.8895C20.6975 21.5981 33.0856 26.7268 35.3623 27.8165H37.6908C39.9644 26.7299 52.3464 21.5981 71.9938 27.8895C72.6208 28.0904 73.05 28.6779 73.05 29.3384V35.4259C73.05 36.0285 72.6939 36.5734 72.146 36.8169C71.6712 37.033 70.2315 37.8822 69.9514 38.8805C69.918 39.0053 69.8906 39.191 69.851 39.4314C69.5375 41.3581 68.7035 46.4747 63.2856 50.3585C59.6666 52.9579 51.4607 52.4343 45.224 50.5807C38.1899 48.4866 36.6224 40.6368 36.5524 40.2746C36.5433 40.2258 36.5341 40.1863 36.5219 40.1498C36.5189 40.1741 36.5128 40.2015 36.5067 40.2289C36.4367 40.6063 34.8753 48.4805 27.829 50.5776C24.6057 51.5395 20.8619 52.1421 17.4924 52.1421ZM39.5414 39.7084C39.5687 39.8423 40.8715 46.1125 46.0885 47.6648C52.9521 49.7071 59.4383 49.3693 61.5081 47.887C65.9002 44.7397 66.5364 40.8224 66.8438 38.9444C66.9077 38.5579 66.9625 38.2565 67.0173 38.0587C67.5104 36.3085 69.0109 35.1306 70.0062 34.5188V30.4585C50.508 24.5566 38.8869 30.6137 38.7682 30.6776C38.546 30.7963 38.2995 30.8602 38.0469 30.8602H35.0031C34.7535 30.8602 34.5039 30.7963 34.2848 30.6807C34.1691 30.6167 22.4477 24.5871 3.04375 30.4585V34.5188C4.03906 35.1306 5.53962 36.3055 6.02967 38.0587C6.0875 38.2535 6.14229 38.5548 6.20316 38.9414C6.51058 40.8224 7.14672 44.7367 11.5389 47.8839C13.6056 49.3632 20.0918 49.7041 26.9585 47.6617C32.209 46.1003 33.4934 39.7662 33.5056 39.7054C33.7643 38.0861 34.9544 36.9538 36.455 36.9325C37.8916 36.9295 39.2278 38.0526 39.5414 39.7084Z" fill="#2A5510"/>
  <path d="M71.5281 30.8602C70.9924 30.8602 70.4719 30.5772 70.195 30.0749L55.9319 4.22438C55.4815 3.42996 54.681 3.4604 54.4375 3.48779C54.2031 3.51518 53.4148 3.67955 53.1591 4.5805L51.6433 8.55868C51.345 9.34397 50.4623 9.73661 49.677 9.43528C48.8917 9.13395 48.4991 8.2543 48.8004 7.46902L50.2736 3.61563C50.7454 1.94461 52.2186 0.687544 54.0753 0.462306C55.9258 0.230982 57.6577 1.10758 58.5861 2.7299L72.8582 28.5987C73.263 29.3353 72.9952 30.2606 72.2617 30.6685C72.0303 30.7994 71.7777 30.8602 71.5281 30.8602Z" fill="#2A5510"/>
  <path d="M1.52188 30.8602C1.27229 30.8602 1.01966 30.7994 0.788332 30.6715C0.0517449 30.2637 -0.216105 29.3384 0.191757 28.6018L14.4548 2.75121C15.3953 1.10758 17.1211 0.230983 18.9778 0.465352C20.8345 0.690589 22.3076 1.94461 22.822 3.74347L24.2526 7.46902C24.5539 8.25431 24.1613 9.13395 23.376 9.43528C22.5938 9.73357 21.708 9.34397 21.4067 8.55868L19.9335 4.7053C19.6322 3.67955 18.8469 3.51519 18.6095 3.4878C18.366 3.4604 17.5716 3.42692 17.1028 4.24569L2.85199 30.075C2.57806 30.5772 2.05758 30.8602 1.52188 30.8602Z" fill="#2A5510"/>
  <path d="M10.8784 39.7297C10.1661 39.7297 9.52998 39.2275 9.38692 38.5031C9.24082 37.7574 9.16473 36.8777 9.16169 35.8885C9.15255 33.6361 10.8144 31.7034 13.0303 31.3959C13.8551 31.265 14.6313 31.8586 14.747 32.6926C14.8626 33.5266 14.2843 34.2936 13.4503 34.4092C12.7503 34.5066 12.2024 35.1519 12.2054 35.8763C12.2085 36.6647 12.2663 37.3708 12.3759 37.9156C12.5372 38.7405 12.0015 39.541 11.1766 39.7023C11.0762 39.7206 10.9758 39.7297 10.8784 39.7297Z" fill="#2A5510"/>
  <path d="M44.3718 39.9732C43.6595 39.9732 43.0234 39.471 42.8803 38.7466C42.6795 37.7178 42.5973 36.6951 42.6521 35.7941C42.7738 33.7427 44.2653 32.029 46.2833 31.6273C47.1081 31.4599 47.9086 32.0016 48.073 32.8265C48.2343 33.6513 47.6986 34.4519 46.8738 34.6162C46.2163 34.7441 45.7293 35.3041 45.6897 35.9737C45.6502 36.6129 45.7141 37.3891 45.8663 38.1561C46.0276 38.981 45.4919 39.7815 44.667 39.9458C44.5696 39.9641 44.4692 39.9732 44.3718 39.9732Z" fill="#2A5510"/>
</svg>`;
    }

    // Create a div with this info and add it to the forecast section.
    const dayElement = document.createElement('div');
    dayElement.className = `forecast-day ${className}`;
    dayElement.innerHTML = `
      <p><strong>${new Date(day.dt * 1000).toLocaleDateString()}</strong></p>
      <div class="icon">${icon}</div>
      <p>${temp} °C</p>
      <p>${day.weather[0].description}</p>
    `;
    forecastContainer.appendChild(dayElement);
  });
}

// Call the function to fetch the weather data and display it on the page.
// This is the function that will be called when the page loads.
fetchWeather();
